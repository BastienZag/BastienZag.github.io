(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function guiAlertDirective() {
	'use strict';
	var componentsModule = angular.module('gui.ng.components.alert', []);
	componentsModule.directive('guiAlert', alert);

	alert.$inject = [];

	function alert() {
		var directive = {
			restrict: 'EA',
			transclude: true,
			template: require('./alert-template.html'),
			scope: {
				type: '@',
				closeButton: '=',
				isClosed: '='
			},
			link: linkFunc
		};

		return directive;

		function linkFunc(scope, el, attr, ctrl) {
			scope.isClosed = scope.isClosed || false;
			scope.closeAlert = function() {
				scope.isClosed = true;
			};
		}
	}
})();

},{"./alert-template.html":2}],2:[function(require,module,exports){
module.exports = "<div ng-class=\"{'is-closed' : isClosed }\" aria-hidden=\"{{ isClosed }}\" class=\"alert alert-{{ type }}\" role=\"alert\">\n\t<button ng-if=\"closeButton\" ng-click=\"closeAlert()\" type=\"button\" class=\"alert-close icon icon-cross\" data-grunticon-embed>close</button>\n\t<ng-transclude></ng-transclude>\n</div>\n";

},{}],3:[function(require,module,exports){
(function alertInit() {
	'use strict';

	// declare the component angular module, you can inject dependencies here
	angular.module('gui.ng.components.alert', []);

	// Require your components here
	require('./alert-directive.js');

}());

},{"./alert-directive.js":1}],4:[function(require,module,exports){
(function guiGrunticonsEmbedDirective() {
	'use strict';
	var componentsModule = angular.module('gui.ng.components.grunticonEmbed', []);
	componentsModule.directive('grunticonEmbed', grunticonEmbed);

	function grunticonEmbed() {
		var directive = {
			restrict: 'A',
			scope: false,
			link: linkFunc
		};

		return directive;

		function linkFunc(scope, el, attr, ctrl) {
			grunticon.embedIcons(grunticon.getIcons(grunticon.getCSS(grunticon.href)));
		}
	}
})();

},{}],5:[function(require,module,exports){
(function grunticonEmbedInit() {
	'use strict';

	// declare the component angular module, you can inject dependencies here
	angular.module('gui.ng.components.grunticonEmbed', []);

	// Require your components here
	require('./grunticon-embed-directive.js');

}());

},{"./grunticon-embed-directive.js":4}],6:[function(require,module,exports){
// Generated by grunt: browserify-imports
(function moduleInit_guiNgComponents() {

	// Add require for other modules here
	// require('my.module.core');

	// Grunt browserify-imports require all components with an index.js here
	// StartRequire
	require('./alert');
	require('./grunticon-embed');
	var angularModuleDependencies = ["gui.ng.components.alert","gui.ng.components.grunticonEmbed"];
	// EndRequire

	// Add your angular module dependencies here
	// angularModuleDependencies.push('other.module');

	try {
		console.log('loading module gui.ng.components');
		angular.module('gui.ng.components', angularModuleDependencies);
	} catch (e) {
		console.log('gui.ng.components is already defined.');}
	}
)();

},{"./alert":3,"./grunticon-embed":5}]},{},[3,5,6,2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhcHAvbW9kdWxlcy9ndWkubmcuY29tcG9uZW50cy9hbGVydC9hbGVydC1kaXJlY3RpdmUuanMiLCJhcHAvbW9kdWxlcy9ndWkubmcuY29tcG9uZW50cy9hbGVydC9hbGVydC10ZW1wbGF0ZS5odG1sIiwiYXBwL21vZHVsZXMvZ3VpLm5nLmNvbXBvbmVudHMvYWxlcnQvaW5kZXguanMiLCJhcHAvbW9kdWxlcy9ndWkubmcuY29tcG9uZW50cy9ncnVudGljb24tZW1iZWQvZ3J1bnRpY29uLWVtYmVkLWRpcmVjdGl2ZS5qcyIsImFwcC9tb2R1bGVzL2d1aS5uZy5jb21wb25lbnRzL2dydW50aWNvbi1lbWJlZC9pbmRleC5qcyIsImFwcC9tb2R1bGVzL2d1aS5uZy5jb21wb25lbnRzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24gZ3VpQWxlcnREaXJlY3RpdmUoKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGNvbXBvbmVudHNNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnZ3VpLm5nLmNvbXBvbmVudHMuYWxlcnQnLCBbXSk7XG5cdGNvbXBvbmVudHNNb2R1bGUuZGlyZWN0aXZlKCdndWlBbGVydCcsIGFsZXJ0KTtcblxuXHRhbGVydC4kaW5qZWN0ID0gW107XG5cblx0ZnVuY3Rpb24gYWxlcnQoKSB7XG5cdFx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRcdHJlc3RyaWN0OiAnRUEnLFxuXHRcdFx0dHJhbnNjbHVkZTogdHJ1ZSxcblx0XHRcdHRlbXBsYXRlOiByZXF1aXJlKCcuL2FsZXJ0LXRlbXBsYXRlLmh0bWwnKSxcblx0XHRcdHNjb3BlOiB7XG5cdFx0XHRcdHR5cGU6ICdAJyxcblx0XHRcdFx0Y2xvc2VCdXR0b246ICc9Jyxcblx0XHRcdFx0aXNDbG9zZWQ6ICc9J1xuXHRcdFx0fSxcblx0XHRcdGxpbms6IGxpbmtGdW5jXG5cdFx0fTtcblxuXHRcdHJldHVybiBkaXJlY3RpdmU7XG5cblx0XHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcblx0XHRcdHNjb3BlLmlzQ2xvc2VkID0gc2NvcGUuaXNDbG9zZWQgfHwgZmFsc2U7XG5cdFx0XHRzY29wZS5jbG9zZUFsZXJ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNjb3BlLmlzQ2xvc2VkID0gdHJ1ZTtcblx0XHRcdH07XG5cdFx0fVxuXHR9XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgbmctY2xhc3M9XFxcInsnaXMtY2xvc2VkJyA6IGlzQ2xvc2VkIH1cXFwiIGFyaWEtaGlkZGVuPVxcXCJ7eyBpc0Nsb3NlZCB9fVxcXCIgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LXt7IHR5cGUgfX1cXFwiIHJvbGU9XFxcImFsZXJ0XFxcIj5cXG5cXHQ8YnV0dG9uIG5nLWlmPVxcXCJjbG9zZUJ1dHRvblxcXCIgbmctY2xpY2s9XFxcImNsb3NlQWxlcnQoKVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYWxlcnQtY2xvc2UgaWNvbiBpY29uLWNyb3NzXFxcIiBkYXRhLWdydW50aWNvbi1lbWJlZD5jbG9zZTwvYnV0dG9uPlxcblxcdDxuZy10cmFuc2NsdWRlPjwvbmctdHJhbnNjbHVkZT5cXG48L2Rpdj5cXG5cIjtcbiIsIihmdW5jdGlvbiBhbGVydEluaXQoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvLyBkZWNsYXJlIHRoZSBjb21wb25lbnQgYW5ndWxhciBtb2R1bGUsIHlvdSBjYW4gaW5qZWN0IGRlcGVuZGVuY2llcyBoZXJlXG5cdGFuZ3VsYXIubW9kdWxlKCdndWkubmcuY29tcG9uZW50cy5hbGVydCcsIFtdKTtcblxuXHQvLyBSZXF1aXJlIHlvdXIgY29tcG9uZW50cyBoZXJlXG5cdHJlcXVpcmUoJy4vYWxlcnQtZGlyZWN0aXZlLmpzJyk7XG5cbn0oKSk7XG4iLCIoZnVuY3Rpb24gZ3VpR3J1bnRpY29uc0VtYmVkRGlyZWN0aXZlKCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBjb21wb25lbnRzTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ2d1aS5uZy5jb21wb25lbnRzLmdydW50aWNvbkVtYmVkJywgW10pO1xuXHRjb21wb25lbnRzTW9kdWxlLmRpcmVjdGl2ZSgnZ3J1bnRpY29uRW1iZWQnLCBncnVudGljb25FbWJlZCk7XG5cblx0ZnVuY3Rpb24gZ3J1bnRpY29uRW1iZWQoKSB7XG5cdFx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRcdHJlc3RyaWN0OiAnQScsXG5cdFx0XHRzY29wZTogZmFsc2UsXG5cdFx0XHRsaW5rOiBsaW5rRnVuY1xuXHRcdH07XG5cblx0XHRyZXR1cm4gZGlyZWN0aXZlO1xuXG5cdFx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cdFx0XHRncnVudGljb24uZW1iZWRJY29ucyhncnVudGljb24uZ2V0SWNvbnMoZ3J1bnRpY29uLmdldENTUyhncnVudGljb24uaHJlZikpKTtcblx0XHR9XG5cdH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24gZ3J1bnRpY29uRW1iZWRJbml0KCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0Ly8gZGVjbGFyZSB0aGUgY29tcG9uZW50IGFuZ3VsYXIgbW9kdWxlLCB5b3UgY2FuIGluamVjdCBkZXBlbmRlbmNpZXMgaGVyZVxuXHRhbmd1bGFyLm1vZHVsZSgnZ3VpLm5nLmNvbXBvbmVudHMuZ3J1bnRpY29uRW1iZWQnLCBbXSk7XG5cblx0Ly8gUmVxdWlyZSB5b3VyIGNvbXBvbmVudHMgaGVyZVxuXHRyZXF1aXJlKCcuL2dydW50aWNvbi1lbWJlZC1kaXJlY3RpdmUuanMnKTtcblxufSgpKTtcbiIsIi8vIEdlbmVyYXRlZCBieSBncnVudDogYnJvd3NlcmlmeS1pbXBvcnRzXG4oZnVuY3Rpb24gbW9kdWxlSW5pdF9ndWlOZ0NvbXBvbmVudHMoKSB7XG5cblx0Ly8gQWRkIHJlcXVpcmUgZm9yIG90aGVyIG1vZHVsZXMgaGVyZVxuXHQvLyByZXF1aXJlKCdteS5tb2R1bGUuY29yZScpO1xuXG5cdC8vIEdydW50IGJyb3dzZXJpZnktaW1wb3J0cyByZXF1aXJlIGFsbCBjb21wb25lbnRzIHdpdGggYW4gaW5kZXguanMgaGVyZVxuXHQvLyBTdGFydFJlcXVpcmVcblx0cmVxdWlyZSgnLi9hbGVydCcpO1xuXHRyZXF1aXJlKCcuL2dydW50aWNvbi1lbWJlZCcpO1xuXHR2YXIgYW5ndWxhck1vZHVsZURlcGVuZGVuY2llcyA9IFtcImd1aS5uZy5jb21wb25lbnRzLmFsZXJ0XCIsXCJndWkubmcuY29tcG9uZW50cy5ncnVudGljb25FbWJlZFwiXTtcblx0Ly8gRW5kUmVxdWlyZVxuXG5cdC8vIEFkZCB5b3VyIGFuZ3VsYXIgbW9kdWxlIGRlcGVuZGVuY2llcyBoZXJlXG5cdC8vIGFuZ3VsYXJNb2R1bGVEZXBlbmRlbmNpZXMucHVzaCgnb3RoZXIubW9kdWxlJyk7XG5cblx0dHJ5IHtcblx0XHRjb25zb2xlLmxvZygnbG9hZGluZyBtb2R1bGUgZ3VpLm5nLmNvbXBvbmVudHMnKTtcblx0XHRhbmd1bGFyLm1vZHVsZSgnZ3VpLm5nLmNvbXBvbmVudHMnLCBhbmd1bGFyTW9kdWxlRGVwZW5kZW5jaWVzKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGNvbnNvbGUubG9nKCdndWkubmcuY29tcG9uZW50cyBpcyBhbHJlYWR5IGRlZmluZWQuJyk7fVxuXHR9XG4pKCk7XG4iXX0=
